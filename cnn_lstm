import numpy as np
import pandas as pd
import yfinance as yf
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, LSTM, Dense, Dropout

# تحميل بيانات سهم آخر (استبدل بالرمز الذي تريده)
ticker = "AAPL"  # مثلاً: أبل
data = yf.download(ticker, start="2020-01-01", end="2024-01-01", interval="1d")

# استخراج أسعار الإغلاق وتطبيعها
closing_prices = data['Close'].values.reshape(-1, 1)
scaler = MinMaxScaler(feature_range=(0, 1))
closing_prices_scaled = scaler.fit_transform(closing_prices)

def create_sequences(data, time_steps=30):
    X, y = [], []
    for i in range(len(data) - time_steps):
        X.append(data[i:i+time_steps])
        y.append(data[i+time_steps])
    return np.array(X), np.array(y)

time_steps = 30
X, y = create_sequences(closing_prices_scaled, time_steps)
X = X.reshape(X.shape[0], X.shape[1], 1)

# تقسيم البيانات
split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# بناء النموذج
model = Sequential([
    Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(time_steps, 1)),
    MaxPooling1D(pool_size=2),
    LSTM(50, return_sequences=True),
    LSTM(50),
    Dense(50, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='linear')
])

# تجميع وتدريب النموذج
model.compile(optimizer='adam', loss='mse')
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))

# تقييم النموذج
loss = model.evaluate(X_test, y_test)
y_pred = model.predict(X_test)

y_test_original = scaler.inverse_transform(y_test)
y_pred_original = scaler.inverse_transform(y_pred)

mse = mean_squared_error(y_test_original, y_pred_original)
print(f"📉 Mean Squared Error (MSE): {mse:.4f}")

# رسم القيم الفعلية مقابل القيم المتوقعة
plt.figure(figsize=(12, 5))
plt.plot(y_test_original, label="Actual Prices", color="blue")
plt.plot(y_pred_original, label="Predicted Prices", color="red", linestyle="dashed")
plt.title(f"{ticker} Stock Price Prediction")
plt.xlabel("Time")
plt.ylabel("Stock Price")
plt.legend()
plt.show()
